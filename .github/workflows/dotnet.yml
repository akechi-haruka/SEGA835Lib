# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
name: .NET
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    types:
      - published
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Publish
      run: |
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\Net6.pubxml -f:net6.0-windows7
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\Net8.pubxml -f:net8.0-windows10.0.18362.0
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\NetStandard20.pubxml -f:netstandard2.0
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\NetStandard21.pubxml -f:netstandard2.1
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\NetStandard21.pubxml -f:netstandard2.1
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\Net35.pubxml -f:net35
        dotnet publish .\SEGA835Lib\SEGA835Lib.csproj --configuration Release /p:PublishProfile=.\SEGA835Lib\Properties\PublishProfiles\Net481.pubxml -f:net481
        dotnet publish .\SEGA835Cmd\SEGA835Cmd.csproj --configuration Release /p:PublishProfile=.\SEGA835Cmd\Properties\PublishProfiles\Sega835Cmd.pubxml
    - name: Upload Lib NET 6
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib-net6-latest
        path: SEGA835Lib/publish/net6
        if-no-files-found: error
        overwrite: true
    - name: Upload Lib NET 8
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib-net8-latest
        path: SEGA835Lib/publish/net8
        if-no-files-found: error
        overwrite: true
    - name: Upload Lib NET Standard 2.0
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib-netstandard2.0-latest
        path: SEGA835Lib/publish/netstandard20
        if-no-files-found: error
        overwrite: true
    - name: Upload Lib NET Standard 2.1
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib-netstandard2.1-latest
        path: SEGA835Lib/publish/netstandard21
        if-no-files-found: error
        overwrite: true
    - name: Upload Lib NET Framework 3.5
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib-netstandard2.1-latest
        path: SEGA835Lib/publish/net35
        if-no-files-found: error
        overwrite: true
    - name: Upload Lib NET Framework 4.8.1
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib-netstandard2.1-latest
        path: SEGA835Lib/publish/net481
        if-no-files-found: error
        overwrite: true
    - name: Upload Cmd
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Cmd-latest
        path: SEGA835Cmd/publish
        if-no-files-found: error
        overwrite: true
    - name: Upload Lib nupkg
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Sega835Lib.nupkg
        path: SEGA835Lib/bin/Release/*.nupkg
        if-no-files-found: error
        overwrite: true
              
  validate_nuget:
    runs-on: windows-latest
    needs: [ build ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: Sega835Lib.nupkg
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_test:
    runs-on: windows-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Run tests
      run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"
    - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
      with:
        reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
        reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: "Code Coverage" # Optional title.
        tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
        customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.
    - name: Upload Combined Coverage XML
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: ${{ github.workspace }}/Cobertura.xml
        retention-days: 5
    - name: Publish Code Coverage Report
      uses: 5monkeys/cobertura-action@master
      with:
          path: ${{ github.workspace }}/Cobertura.xml
          minimum_coverage: 30
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
    - name: Upload Test Result Files
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ github.workspace }}/**/TestResults/**/*
        retention-days: 5
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: always()
      with:
        files: "${{ github.workspace }}/**/*.trx"



  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: windows-latest
    needs: [ validate_nuget, run_test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: Sega835Lib.nupkg
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
